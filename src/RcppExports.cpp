// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// GENERALIZED_LOGISTIC
List GENERALIZED_LOGISTIC(double r_max, double K, double N1, double z, double start_Yr, double num_Yrs, NumericVector catches, double MVP);
RcppExport SEXP _HumpbackSIR_GENERALIZED_LOGISTIC(SEXP r_maxSEXP, SEXP KSEXP, SEXP N1SEXP, SEXP zSEXP, SEXP start_YrSEXP, SEXP num_YrsSEXP, SEXP catchesSEXP, SEXP MVPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type r_max(r_maxSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type start_Yr(start_YrSEXP);
    Rcpp::traits::input_parameter< double >::type num_Yrs(num_YrsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< double >::type MVP(MVPSEXP);
    rcpp_result_gen = Rcpp::wrap(GENERALIZED_LOGISTIC(r_max, K, N1, z, start_Yr, num_Yrs, catches, MVP));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_sum
double rcpp_sum(NumericVector v);
RcppExport SEXP _HumpbackSIR_rcpp_sum(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sum(v));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HumpbackSIR_GENERALIZED_LOGISTIC", (DL_FUNC) &_HumpbackSIR_GENERALIZED_LOGISTIC, 8},
    {"_HumpbackSIR_rcpp_sum", (DL_FUNC) &_HumpbackSIR_rcpp_sum, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_HumpbackSIR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
